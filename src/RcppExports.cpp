// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// solve_LDLT
Eigen::MatrixXd solve_LDLT(Eigen::Map<Eigen::MatrixXd> a, Eigen::Map<Eigen::MatrixXd> b);
RcppExport SEXP _sanic_solve_LDLT(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type a(aSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_LDLT(a, b));
    return rcpp_result_gen;
END_RCPP
}
// solve_SLDLT
Eigen::MatrixXd solve_SLDLT(Eigen::MappedSparseMatrix<double> a, Eigen::Map<Eigen::MatrixXd> b);
RcppExport SEXP _sanic_solve_SLDLT(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type a(aSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_SLDLT(a, b));
    return rcpp_result_gen;
END_RCPP
}
// solve_PPLU
Eigen::MatrixXd solve_PPLU(Eigen::Map<Eigen::MatrixXd> a, Eigen::Map<Eigen::MatrixXd> b);
RcppExport SEXP _sanic_solve_PPLU(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type a(aSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_PPLU(a, b));
    return rcpp_result_gen;
END_RCPP
}
// solve_SLU
Eigen::MatrixXd solve_SLU(Eigen::MappedSparseMatrix<double> a, Eigen::Map<Eigen::MatrixXd> b);
RcppExport SEXP _sanic_solve_SLU(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type a(aSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_SLU(a, b));
    return rcpp_result_gen;
END_RCPP
}
// solve_CPHQR
Eigen::MatrixXd solve_CPHQR(Eigen::Map<Eigen::MatrixXd> a, Eigen::Map<Eigen::MatrixXd> b);
RcppExport SEXP _sanic_solve_CPHQR(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type a(aSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_CPHQR(a, b));
    return rcpp_result_gen;
END_RCPP
}
// solve_SQR
Eigen::MatrixXd solve_SQR(Eigen::MappedSparseMatrix<double> a, Eigen::Map<Eigen::MatrixXd> b);
RcppExport SEXP _sanic_solve_SQR(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type a(aSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_SQR(a, b));
    return rcpp_result_gen;
END_RCPP
}
// solve_BiCGSTAB
Eigen::MatrixXd solve_BiCGSTAB(Eigen::MappedSparseMatrix<double> a, Eigen::Map<Eigen::MatrixXd> b, Eigen::Map<Eigen::MatrixXd> x0, double tol, int iter, bool verbose);
RcppExport SEXP _sanic_solve_BiCGSTAB(SEXP aSEXP, SEXP bSEXP, SEXP x0SEXP, SEXP tolSEXP, SEXP iterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type a(aSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_BiCGSTAB(a, b, x0, tol, iter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// solve_LSCG
Eigen::VectorXd solve_LSCG(Eigen::MappedSparseMatrix<double> a, Eigen::Map<Eigen::MatrixXd> b, Eigen::Map<Eigen::MatrixXd> x0, double tol, int iter, bool verbose);
RcppExport SEXP _sanic_solve_LSCG(SEXP aSEXP, SEXP bSEXP, SEXP x0SEXP, SEXP tolSEXP, SEXP iterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type a(aSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_LSCG(a, b, x0, tol, iter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// solve_CG
Eigen::VectorXd solve_CG(Eigen::MappedSparseMatrix<double> a, Eigen::Map<Eigen::MatrixXd> b, Eigen::Map<Eigen::MatrixXd> x0, double tol, int iter, int verbose);
RcppExport SEXP _sanic_solve_CG(SEXP aSEXP, SEXP bSEXP, SEXP x0SEXP, SEXP tolSEXP, SEXP iterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type a(aSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_CG(a, b, x0, tol, iter, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sanic_solve_LDLT", (DL_FUNC) &_sanic_solve_LDLT, 2},
    {"_sanic_solve_SLDLT", (DL_FUNC) &_sanic_solve_SLDLT, 2},
    {"_sanic_solve_PPLU", (DL_FUNC) &_sanic_solve_PPLU, 2},
    {"_sanic_solve_SLU", (DL_FUNC) &_sanic_solve_SLU, 2},
    {"_sanic_solve_CPHQR", (DL_FUNC) &_sanic_solve_CPHQR, 2},
    {"_sanic_solve_SQR", (DL_FUNC) &_sanic_solve_SQR, 2},
    {"_sanic_solve_BiCGSTAB", (DL_FUNC) &_sanic_solve_BiCGSTAB, 6},
    {"_sanic_solve_LSCG", (DL_FUNC) &_sanic_solve_LSCG, 6},
    {"_sanic_solve_CG", (DL_FUNC) &_sanic_solve_CG, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_sanic(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
